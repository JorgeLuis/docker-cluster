version: '3.9' # specify docker-compose version

# Define the services/containers to be run
services:
  angular: # name of the first service
    container_name: angular
    build: angular-client # specify the directory of the Dockerfile
    ports:
      - "4200:4200" # specify port forewarding
    volumes:
      - ./angular-client:/app # this will enable changes made to the angular app reflect in the container

  express: #name of the second service
    container_name: express
    build: express-server # specify the directory of the Dockerfile
    ports:
      - "3000:3000" #specify ports forewarding
    volumes:
      - ./express-server:/usr/src/app
    depends_on:
      mongo-server:
        condition: "service_started"
      mysql-server:
        condition: "service_healthy"
      redis-server:
        condition: "service_started"
      neo4j-server:
        condition: "service_started"

  mongo-server: # name of the third service
    container_name: mongo
    image: mongo # specify image to build container from
    ports:
      - "27019:27017" # specify port forewarding
  
  redis-server:
    container_name: redis
    hostname: redis 
    image: 'redis'

  redis-commander:
    container_name: redis-commander
    hostname: redis-commander
    image: rediscommander/redis-commander:latest
    restart: always
    environment:
    - REDIS_HOSTS=local:redis:6379
    ports:
    - "8081:8081"

  mysql-server:
    container_name: mysql
    image: mysql
    command: --default-authentication-plugin=mysql_native_password
    restart: always
    ports:
        - 3307:3306 
    environment:
        MYSQL_ROOT_PASSWORD: 123456 
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
      timeout: 20s
      retries: 10000
      interval: 5s
    volumes:             
    - ./init:/docker-entrypoint-initdb.d
  
  adminer:
    container_name: adminer
    image: adminer
    restart: always
    ports:
      - 8085:8080
    depends_on:
      - mysql-server

  neo4j-server:
    container_name: neo4j
    hostname: neo4j
    image: neo4j
    restart: always
    expose:
      - 7474
      - 7687
    ports:
      - '7474:7474'
      - '7687:7687'
    environment:
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_dbms_shell_enabled=true
      - NEO4J_AUTH=neo4j/admin
      - NEO4JLABS_PLUGINS=["apoc"]

  netdata:
    container_name: netdata
    image: netdata/netdata
    restart: always
    ports:
      - 19999:19999
    cap_add:
      - SYS_PTRACE
    security_opt:
      - apparmor:unconfined
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - DOCKER_USR=root